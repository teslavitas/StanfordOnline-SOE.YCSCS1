/*
 *  cool.cup
 *              Parser definition for the COOL language.
 *
 */

import java_cup.runtime.*;

/* Stuff enclosed in {: :} is copied verbatim to the class containing
all parser actions.  All the extra variables/functions you want to use
in the semantic actions should go here.  Don't remove or modify anything
that was there initially.  */

action code {: 

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }
:} 

/************************************************************************/
/*                DONT CHANGE ANYTHING IN THIS SECTION                  */

parser code {:
    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }
:}

/* Declare the terminals; a few have types for associated lexemes.  The
token ERROR is never used in the parser; thus, it is a parse error when
the lexer returns it.  */

terminal CLASS, ELSE, FI, IF, IN, INHERITS, LET, LET_STMT, LOOP, POOL, THEN, WHILE;
terminal CASE, ESAC, OF, DARROW, NEW, ISVOID;
terminal ASSIGN, NOT, LE, ERROR;
terminal PLUS, DIV, MINUS, MULT, EQ, LT, DOT, NEG, COMMA, SEMI, COLON;
terminal LPAREN, RPAREN, AT, LBRACE, RBRACE;
terminal AbstractSymbol STR_CONST, INT_CONST;
terminal Boolean BOOL_CONST;
terminal AbstractSymbol TYPEID, OBJECTID;

/*  DON'T CHANGE ANYTHING ABOVE THIS LINE, OR YOUR PARSER WONT WORK       */
/**************************************************************************/

   /* Complete the nonterminal list below, giving a type for the semantic
      value of each non terminal. (See the CUP documentation for details. */

nonterminal programc program;
nonterminal Classes class_list;
nonterminal class_c class;
nonterminal Features feature_list;
nonterminal method method_nonterm;
nonterminal Formals formal_list;
nonterminal formalc formal;
nonterminal Expressions expression_list;
nonterminal Expressions argument_list;
nonterminal Expression expression;
nonterminal Cases case_branch_list;
nonterminal branch case_branch;
nonterminal let let_part;
nonterminal attr attribute;

/* Precedence declarations go here. */
precedence right ASSIGN;
precedence left NOT;
precedence nonassoc LE, LT, EQ;
precedence left PLUS, MINUS;
precedence left MULT, DIV;
precedence left ISVOID;
precedence left NEG;
precedence left AT;
precedence left DOT;

/* Gramar*/
program	
	::= class_list:cl
	    {: RESULT = new programc(curr_lineno(), cl); :}
        ;

class_list
	/* single class */
	::= class:c SEMI
	    {: RESULT = (new Classes(curr_lineno())).appendElement(c); :}
	/* several classes */
	| class_list:cl class:c SEMI
	    {: RESULT = cl.appendElement(c); :}
	/* single error class*/
	| error SEMI
	    {: RESULT = (new Classes(curr_lineno())); :}
	/* error class in the end of the list*/
	| class_list:cl error SEMI
	    {: RESULT = cl; :}
	;

/* If no parent is specified, the class inherits from the Object class */
class
	::= CLASS TYPEID:n LBRACE feature_list:f RBRACE
	    {: RESULT = new class_c(curr_lineno(), n, 
		                   AbstractTable.idtable.addString("Object"), 
				   f, curr_filename()); :}
	| CLASS TYPEID:n INHERITS TYPEID:p LBRACE feature_list:f RBRACE
	    {: RESULT = new class_c(curr_lineno(), n, p, f, curr_filename()); :}
	;
/* Feature list may be empty, but no empty features in list. */
feature_list
	::= /* empty */
	    {: RESULT = new Features(curr_lineno()); :}
	/* single method*/
        | method_nonterm:m SEMI
            {: RESULT = new Features(curr_lineno()).appendElement(m); :} 
	/* single atrribute*/
        | attribute:a SEMI
            {: RESULT = new Features(curr_lineno()).appendElement(a); :} 
        /* multiple features with a method in the end*/
        | feature_list:fl method_nonterm:m SEMI
            {: RESULT = fl.appendElement(m); :}
        /* multiple features with an attribute in the end*/
        | feature_list:fl attribute:a SEMI
            {: RESULT = fl.appendElement(a); :}
	/* single error*/
	| error SEMI
	    {: RESULT = new Features(curr_lineno()); :}
	/* feature list win an error in the end*/
	| feature_list:fl error SEMI 
	    {: RESULT = fl; :}
	;
attribute
	/* attribute with no body*/
	::= OBJECTID:id COLON TYPEID:typeid
	    {: RESULT = new attr(curr_lineno(), id, typeid, new no_expr(curr_lineno())); :}
	/* attrbitute with body*/
	|
	OBJECTID:id COLON TYPEID:typeid ASSIGN expression:e
	    {: RESULT = new attr(curr_lineno(), id, typeid, e); :}
	;
formal_list
	::= /* empty*/
	    {: RESULT = new Formals(curr_lineno()); :}
	| formal:f
	    {: RESULT = new Formals(curr_lineno()).appendElement(f); :}
	| formal_list:fl COMMA formal:f
	    {: RESULT = fl.appendElement(f); :}
	;
formal
	::= OBJECTID:id COLON TYPEID:typeid
	    {: RESULT = new formalc(curr_lineno(), id, typeid); :}
	;
method_nonterm
        ::= OBJECTID:id LPAREN formal_list:formals  RPAREN COLON TYPEID:t LBRACE expression:e RBRACE
            {: RESULT = new method(curr_lineno(), id, formals, t, e); :}
	;
argument_list
	::= /* empty */
	    {: RESULT = new Expressions(curr_lineno()); :}
	| expression:e
	    {: RESULT = new Expressions(curr_lineno()).appendElement(e); :}
	| argument_list:el COMMA expression:e
	    {: RESULT = el.appendElement(e); :}
	;
expression_list
	::= expression:e SEMI
	    {: RESULT = new Expressions(curr_lineno()).appendElement(e); :}
	| expression_list:el expression:e SEMI
	    {: RESULT = el.appendElement(e); :}
	/* signle error in expression list*/
	| error SEMI
	    {: RESULT = new Expressions(curr_lineno()); :}
	/* error in the end of the list*/
	| expression_list:el error SEMI
	    {: RESULT = el; :}
	;
case_branch_list
	::= case_branch:cb
	    {: RESULT = new Cases(curr_lineno()).appendElement(cb); :}
	| case_branch_list:cbl case_branch:cb
	    {: RESULT = cbl.appendElement(cb); :}
	;
case_branch
	::= OBJECTID:id COLON TYPEID:typeid DARROW expression:e SEMI
	    {: RESULT = new branch(curr_lineno(), id, typeid, e); :}
	;
let_part
	/* let with no expression*/
	::= OBJECTID:id COLON TYPEID:typeid
	    {: RESULT = new let(curr_lineno(), id, typeid, new no_expr(curr_lineno()), new no_expr(curr_lineno())); :}
	/* let with expression*/
	| OBJECTID:id COLON TYPEID:typeid ASSIGN expression:e
	    {: RESULT = new let(curr_lineno(), id, typeid, e, new no_expr(curr_lineno())); :}
	/* let with no expression preceded by another let */
	| let_part:lp COMMA OBJECTID:id COLON TYPEID:typeid
	    {: 	
		let currentLet = lp;
		while(currentLet.body instanceof let){
		    currentLet = (let)currentLet.body;
		}
		currentLet.body = new let(curr_lineno(), id, typeid, new no_expr(curr_lineno()), new no_expr(curr_lineno())); ;
		RESULT = lp;
	    :}
	/* let with expression preceded by anoter let */
	| let_part:lp COMMA OBJECTID:id COLON TYPEID:typeid ASSIGN expression:e
	    {: 
		let currentLet = lp;
		while(currentLet.body instanceof let){
		    currentLet = (let)currentLet.body;
		}
		currentLet.body = new let(curr_lineno(), id, typeid, e, new no_expr(curr_lineno())); 
		RESULT = lp;
	    :}

	/* error follow by a let with no expression*/
        | error COMMA OBJECTID:id COLON TYPEID:typeid
            {: RESULT = new let(curr_lineno(), id, typeid, new no_expr(curr_lineno()), new no_expr(curr_lineno())); :}
        /* error followed by a let with expression*/
        | error COMMA OBJECTID:id COLON TYPEID:typeid ASSIGN expression:e
            {: RESULT = new let(curr_lineno(), id, typeid, e, new no_expr(curr_lineno())); :}
        /* error preceded by a let and followed by a let with no expression*/
        | let_part:lp COMMA error COMMA OBJECTID:id COLON TYPEID:typeid
	    {: 	
		let currentLet = lp;
		while(currentLet.body instanceof let){
		    currentLet = (let)currentLet.body;
		}
		currentLet.body = new let(curr_lineno(), id, typeid, new no_expr(curr_lineno()), new no_expr(curr_lineno())); ;
		RESULT = lp;
	    :}
        /* error preceded by a let and followed by a let with an expression*/
        | let_part:lp COMMA error COMMA OBJECTID:id COLON TYPEID:typeid ASSIGN expression:e
	    {: 
		let currentLet = lp;
		while(currentLet.body instanceof let){
		    currentLet = (let)currentLet.body;
		}
		currentLet.body = new let(curr_lineno(), id, typeid, e, new no_expr(curr_lineno())); 
		RESULT = lp;
	    :}
	;
expression
	::=
	/* variable assignment*/
	OBJECTID:id ASSIGN expression:e
	    {: RESULT = new assign(curr_lineno(), id, e); :}
	|
	/* method call with skipped self*/
	OBJECTID:id LPAREN argument_list:actual RPAREN
	    {: RESULT = new dispatch(curr_lineno(), new object(curr_lineno(), AbstractTable.idtable.addString("self")),
				     id, actual); :}
	|
	/* full method call*/
	expression:caller DOT OBJECTID:id LPAREN argument_list:actual RPAREN
	    {: RESULT = new dispatch(curr_lineno(), caller, id, actual); :}
	|
	/* full method call with explicit caller type */
	expression:caller AT TYPEID:typeid DOT OBJECTID:id LPAREN argument_list:actual RPAREN
	    {: RESULT = new static_dispatch(curr_lineno(), caller, typeid, id, actual); :}
	|
	/* if statement*/
	IF expression:condition THEN expression:e1 ELSE expression:e2 FI
	    {: RESULT = new cond(curr_lineno(), condition, e1, e2); :}
	|
	/* while loop*/
	WHILE expression:condition LOOP expression:body POOL
	    {: RESULT = new loop(curr_lineno(), condition, body); :}
	|
	/* expression block */
	LBRACE expression_list:el RBRACE
	    {: RESULT = new block(curr_lineno(), el); :}
	|
	/* let expression */
	LET let_part:lp IN expression:e
	    {: 
		let currentLet = lp;
		while(currentLet.body instanceof let){
		    currentLet = (let)currentLet.body;
		}
		currentLet.body = e;
		RESULT = lp;
	    :}
	|
	CASE expression:e OF case_branch_list:cbl ESAC
	    {: RESULT = new typcase(curr_lineno(),e,cbl); :}
	|
	/* object creation*/
	NEW TYPEID:t
	    {: RESULT = new new_(curr_lineno(), t); :}
	|
	/* isvoid check*/
	ISVOID expression:e
	    {: RESULT = new isvoid(curr_lineno(), e); :}
	|	
	/* expr + expr*/
	expression:e1 PLUS expression:e2
	    {: RESULT = new plus(curr_lineno(), e1, e2); :}
	|	
	/* expr - expr*/
	expression:e1 MINUS expression:e2
	    {: RESULT = new sub(curr_lineno(), e1, e2); :}
	|	
	/* expr * expr*/
	expression:e1 MULT expression:e2
	    {: RESULT = new mul(curr_lineno(), e1, e2); :}
	|	
	/* expr / expr*/
	expression:e1 DIV expression:e2
	    {: RESULT = new divide(curr_lineno(), e1, e2); :}
	|	
	/* ~expr */
	NEG expression:e
	    {: RESULT = new neg(curr_lineno(), e); :}
	|	
	/* expr < expr*/
	expression:e1 LT expression:e2
	    {: RESULT = new lt(curr_lineno(), e1, e2); :}
	|	
	/* expr <= expr*/
	expression:e1 LE expression:e2
	    {: RESULT = new leq(curr_lineno(), e1, e2); :}
	|	
	/* expr = expr*/
	expression:e1 EQ expression:e2
	    {: RESULT = new eq(curr_lineno(), e1, e2); :}
    	/* not*/
	|
	NOT expression:e
	    {: RESULT = new comp(curr_lineno(), e); :}
	|
	/* (expr) */
	LPAREN expression:e RPAREN
	    {: RESULT = e; :}
	|
	/* ID */
	OBJECTID:id
	    {: RESULT = new object(curr_lineno(),id); :}
	|
	/* int constant*/
	INT_CONST:i
	    {: RESULT = new int_const(curr_lineno(), i); :}
	|
	/* string constant*/
	STR_CONST:s
	    {: RESULT = new string_const(curr_lineno(), s); :}
	|
	/* false */
	BOOL_CONST:b
	    {: RESULT = new bool_const(curr_lineno(), b); :}
	;
